from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import joblib
import numpy as np

# Load the saved model and scaler; ensure these files are generated by running train_model.py first.
try:
    model = joblib.load("best_model.pkl")
    scaler = joblib.load("scaler.pkl")
except Exception as e:
    raise Exception("Model or scaler file not found. Please run 'train_model.py' to generate them.")

# Initialize the FastAPI app
app = FastAPI(
    title="House Price Prediction API",
    description="API for predicting house prices using a pre-trained ML model.",
    version="1.0"
)

# Define the expected input data model using Pydantic
class HouseFeatures(BaseModel):
    MedInc: float
    HouseAge: float
    AveRooms: float
    AveBedrms: float
    Population: float
    AveOccup: float
    Latitude: float
    Longitude: float

@app.get("/")
def read_root():
    """
    Basic health-check endpoint.
    """
    return {"message": "Welcome to the House Price Prediction API. Use the /predict endpoint to get predictions."}

@app.post("/predict")
def predict_price(features: HouseFeatures):
    """
    Endpoint to predict house price.
    Accepts JSON with house features and returns the predicted price.
    """
    try:
        # Convert incoming data into the expected feature array shape
        feature_array = [[
            features.MedInc,
            features.HouseAge,
            features.AveRooms,
            features.AveBedrms,
            features.Population,
            features.AveOccup,
            features.Latitude,
            features.Longitude
        ]]
        
        # Scale the input features using the same scaler as in training
        feature_scaled = scaler.transform(feature_array)
        
        # Make the prediction using the trained model
        prediction = model.predict(feature_scaled)
        predicted_price = prediction[0]
        
        return {"predicted_house_price": predicted_price}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))